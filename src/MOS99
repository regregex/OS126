; MOS99
 TTL MOS99         Operating system ROM entry points and hardware vectors
 OPT MOS99

;(c) 1981 ACORN Computers Limited
;BBC Microcomputer Machine Operating System (MOS)

;Change record:

;Author(s):
;PB     Paul Bond

 ORG &FC00
  
 = "(C) 1981 Acorn Computers Ltd."
 = "Thanks are due to the following contributors to the development of the BBC Computer "
 = "(among others too numerous to mention):- "
 = "David Allen,"
 = "Bob Austin,"
 = "Ram Banerjee,"
 = "Paul Bond,"
 = "Allen Boothroyd,"
 = "Cambridge,"
 = "Cleartone,"
 = "John Coll,"
 = "John Cox,"
 = "Andy Cripps,"
 = "Chris Curry,"
 = "6502 designers,"
 = "Jeremy Dion,"
 = "Tim Dobson,"
 = "Joe Dunn,"
 = "Paul Farrell,"
 = "Ferranti,"
 = "Steve Furber,"
 = "Jon Gibbons,"
 = "Andrew Gordon,"
 = "Lawrence Hardwick,"
 = "Dylan Harris,"
 = "Hermann Hauser,"
 = "Hitachi,"
 = "Andy Hopper,"
 = "ICL,"
 = "Martin Jackson,"
 = "Brian Jones,"
 = "Chris Jordan,"
 = "David King,"
 = "David Kitson,"
 = "Paul Kriwaczek,"
 = "Computer Laboratory,"
 = "Peter Miller,"
 = "Arthur Norman,"
 = "Glyn Phillips,"
 = "Mike Prees,"
 = "John Radcliffe,"
 = "Wilberforce Road,"
 = "Peter Robinson,"
 = "Richard Russell,"
 = "Kim Spence-Jones,"
 = "Graham Tebby,"
 = "Jon Thackray,"
 = "Chris Turner,"
 = "Adrian Warner,"
 = "Roger Wilson,"
 = "Alan Wright."
;
; test ROM indirection
 = MRESET
 = /(MRESET )

; ORG $FF00
; Page $FF contains code which has to be located at a fixed
; place in memory. Two main types of code come into this
; category:
;   (a) Code to call a routine located in a paged ROM
;   (b) Fixed OS calls

; Calls to the operating system are normally made by calling
; JMIs located at the top of the address space of the m/c.
; The indirection vectors are located in page 2 starting at
; $0200. To redirect an OS call which indirects thru location
; $0200+2*x:
;   (a) Set up a 3-byte tuple at location ROMVEC+3*x to refer
;       to the paged ROM entry point
;   (b) Set the OS indirection at location $0200+2*x to value
;       $FF00+3*x
; A JMI $0200+2*x will then result in the routine in paged ROM
; being called. The routine is entered with A, X, Y and P
; unaltered since the point of call. Similarly, no registers
; are corrupted on return from the routine.
;
; Locations $FF00 onwards contain JSRs to the same location (OSROM);
; thus when OSROM is entered the top entry on the stack determines
; which JSR OSROM was called, enabling the OS call made to be
; identified (by convention paged ROM routed indirections thru
; $0200+2*x jump to location $FF00+3*x).

ROMUSR
 JSR OSROM

ROMBRK
 JSR OSROM

ROMIRA
 JSR OSROM

ROMIRB
 JSR OSROM

ROMCOM
 JSR OSROM

ROMBYT
 JSR OSROM

ROMWRD
 JSR OSROM

ROMWRC
 JSR OSROM

ROMRDC
 JSR OSROM

ROMFIL
 JSR OSROM

ROMARG
 JSR OSROM

ROMBGT
 JSR OSROM

ROMBPT
 JSR OSROM

ROMGPB
 JSR OSROM

ROMFND
 JSR OSROM

ROMFSC
 JSR OSROM

ROMEVT
 JSR OSROM

ROMUPT
 JSR OSROM

ROMNET
 JSR OSROM

ROMVDU
 JSR OSROM

ROMKEY
 JSR OSROM

ROMINS
 JSR OSROM

ROMREM
 JSR OSROM

ROMCNP
 JSR OSROM

 JSR OSROM

 JSR OSROM

 JSR OSROM

 [ STARGO = &00
 % 1 ;1 byte padding

ARGSW
 CMPIM &01
 BNE UPARGS
 CPYIM &00
 BNE UPARGS
 LDA TAILHI ;OSARGS A=1, Y=0 return command line tail
 BEQ UPARG1 ;return *GO/CFS pointer if valid
 JMP RETAIL
UPARG1  ;A=0, C=1
 ROLA  ;else restore A=1
UPARGS  ;call upstream OSARGS
 JMI ARGVEC
 |
 % 21 ;21 bytes padding
 ]

FXBPUT  ;FX entry, C=1
 TXA ;A = character
 BCS OSBPUT ;[ALWAYS jump]

FUDGE PHA
 PHA
 PHP
 PHA
 TXA
 PHA
 TYA
 PHA
 TSX ;y  x  a  p  a  a  88 FF el eh cl ch
 LDYAX &0109 ;get vector offset+2
 LDAAY ROMVEC-&02+&00
 STAAX &0105 ;copy LSB vector over placeholder
 LDAAY ROMVEC-&02+&01
 STAAX &0106 ;copy MSB vector over placeholder
 LDA ROMID ;copy ROM slot over MSB vector offset
 STAAX &010A ;y  x  a  p  vl vh 88 FF el r  cl ch
 PLA ;Y in A ready to restore
 LDXAY ROMVEC-&02+&02 ;get vector ROM slot
 TAY ;restore Y
 PLA ;X in A ready to restore
 JSR STXROM ;set destination ROM slot
 TAX ;restore X
 PLA ;restore A
 RTI ;restore P and jump to vector

OSROM JSR FUDGE ;push restore address on stack, RTS returns below
;routine to restore ROM slot from indirection
 PHP
 PHA
 TXA
 PHA
 TSX ;x  a  p  el r  cl ch
 LDAAX &0105
 STA ROMID
 STA ROM ;restore ROM slot
 LDAAX &0103
 STAAX &0104
 STAAX &0105 ;copy status over vec offset and ROM slot
 PLA
 TAX ;restore X
 PLA ;restore A
 PLP
 PLP
 PLP ;restore status (and discard 2 copies)
VINUSE ;target of vectors in use by a client waiting for a server
 NOP
DEFEVT  ;default EVENT routine
DEFUPT  ;default user print routine (simulate printer busy)
DEFNET  ;default net routine (simulate printer busy)
RTS
 RTS

 ;FXBPUT gives up its place to OSWRSC
 ;to keep VINUSE and RTS in the same place as OS 1.25


OSWRSC JMP WRSC

; security copy of indirection data
 = VLEN
 = IPAGE2
 = /(IPAGE2 )
;
 JMP RPROM ;read byte from paged ROM
 JMP VDU ;raw VDU WRCH (corrupts A, X and Y)
 JMP EVENT ;signal event
 JMP GSINTS ;used by paged ROMs
 JMP GSREAD ;used by paged ROMs
 JMP RDCH ;used by tube
 JMP WRCH ;used by tube
OSFIND JMI FNDVEC

OSBGPB JMI GPBVEC
OSBPUT JMI BPTVEC
OSBGET JMI BGTVEC
 [ STARGO = &00
OSARGS JMP ARGSW
 |
OSARGS JMI ARGVEC
 ]
OSFILE JMI FILVEC
OSRDCH JMI RDCVEC
OSASCI CMPIM MCR
 BNE OSWRCH
OSNEWL LDAIM MLF
 JSR OSWRCH
WRCR
 LDAIM MCR
OSWRCH JMI WRCVEC
OSWORD JMI WORVEC
OSBYTE JMI BYTVEC
OSCLI JMI COMVEC

; hardware vectors
 = NMI ;non-maskable interrupt
 = /(NMI )
 = MRESET ;hardware reset
 = /(MRESET )
 = IRQ ;interrupt
 = /(IRQ )
ENDROM  ;end of ROM

 [ ENDROM=0
 |
 ! 0,"MOS99 is not $0400 bytes long"
 ]

 TTL BBC Microcomputer Machine Operating System (MOS)

 OPT OPPON

 END
